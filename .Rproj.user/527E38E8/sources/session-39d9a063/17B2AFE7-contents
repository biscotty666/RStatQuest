---
title: "PCA StatQuest"
output: html_notebook
---

# Principle Component Analysis

[Statquest Video](https://www.youtube.com/watch?v=0Jp4gsfOLMs&t=0s)

## Generate fake dataset

```{r}
data.matrix <- matrix(nrow = 100, ncol = 10)
colnames(data.matrix) <- c(paste("wt", 1:5, sep = ""), 
                           paste("ko", 1:5, sep = ""))

rownames(data.matrix) <- paste("gene", 1:100, sep="")

head(data.matrix)
```

```{r}
for (i in 1:100) {
  wt.values <- rpois(5, lambda = sample(x = 10:1000, size = 1))
  ko.values <- rpois(5, lambda = sample(x = 10:1000, size = 1))
  
  data.matrix[i,] <- c(wt.values, ko.values)
}

head(data.matrix)
```

## `prcomp()`

Determine if the data is related
prcomp expects genes to be columns and samples to be
rows we need to transpose the matrix with `t()`

```{r}
pca <- prcomp(t(data.matrix), scale = TRUE)
```

**x** contains the principle components (PCs) for drawing a graph
Here we use the first two columns in x to draw a 2-d plot of
the first PCs

The first PC accounts for the most varation in the original data, the 2nd 
accounts for the 2nd most variation, etc. Typically the first 2 are used
but sometimes P2 and P3 are used.

```{r}
plot(pca$x[,1], pca$x[,2])
```

To get a sense of how meaningful the clusters are we can see how much
of the variation in the original is accounted for by PC1.

The square of `sdev()` is the standard deviation can be used to calculate
this and produce a **Scree Plot**

```{r}
pca.var <- pca$sdev^2
pca.var.per <- round(pca.var/sum(pca.var) * 100, 1)
barplot(pca.var.per, main = "Scree Plot",
        xlab = "Principle Componenet",
        ylab = "Percent Variation")
```
## `ggplot`

```{r}
library(ggplot2)
```

```{r}
pca.data <- data.frame(Sample = rownames(pca$x),
                       X = pca$x[,1],
                       Y = pca$x[,2])

head(pca.data)
```
```{r}
ggplot(data = pca.data, aes(x=X, y=Y, label=Sample)) +
  geom_text() +
  xlab(paste("PC1 - ", pca.var.per[1], "%", sep = "")) +
  ylab(paste("PC2 - ", pca.var.per[2], "%", sep = "")) +
  theme_bw() +
  ggtitle("My PCA Graph")
```
## Loading scores

`prcomp()` creates loading scores called **rotation**

Since PC1 accounts for 92% of the variation we can look at
the loading scores for PC1
```{r}
loading_scores <- pca$rotation[,1]
```
Genes that push samples to the left will have large negative values.
Genes that push samples to the right will have large positive values
Since we want order of magnitute we can use absolute values
```{r}
gene_scores <- abs(loading_scores)
gene_scores_ranked <- sort(gene_scores, decreasing = TRUE)
top_10_genes <- names(gene_scores_ranked[1:10])
top_10_genes
```

Now check which had positive loading scores

```{r}
pca$rotation[top_10_genes,1]
```












